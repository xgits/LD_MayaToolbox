
global proc fixReverse(){
    string $selAll[] = `ls -sl`;
    string $sel_child;
    for ($sel_child in $selAll){
        select $sel_child;
        fixReverseDo();
    }
    select $selAll;
}

global proc fixReverseDo()
{
    //create ClosestPointOnMesh Node
    string $sel[] = `ls -sl`;
    
    //empty test
    if($sel[0] == "")          
    {
        print "Nothing Selected!";
    }
    else
    {
        //get Shape
        string $selShape[] = `listRelatives -shapes`;  //get the selection
        string $selShape0 = $selShape[0];
        
        //get Node
        string $node_ClosestPointOnMesh = `createNode closestPointOnMesh`;
        
        //prepare Params
        string $selShape0_worldMesh = $selShape0+".worldMesh[0]";
        string $selShape0_worldMatrix = $selShape0+".worldMatrix[0]";
        string $node_ClosestPointOnMesh_inMesh = $node_ClosestPointOnMesh+".inMesh";
        string $node_ClosestPointOnMesh_inPosition = $node_ClosestPointOnMesh+".inPosition";
        string $node_ClosestPointOnMesh_inputMatrix = $node_ClosestPointOnMesh+".inputMatrix";
        string $node_ClosestPointOnMesh_result_normal = $node_ClosestPointOnMesh+".result.normal";
        string $node_ClosestPointOnMesh_outPosition = $node_ClosestPointOnMesh+".position";
        string $persp_translate = "persp.translate";
        
        //connectAttr
        connectAttr -force $selShape0_worldMesh $node_ClosestPointOnMesh_inMesh;
        connectAttr -force $persp_translate $node_ClosestPointOnMesh_inPosition;
        connectAttr -force $selShape0_worldMatrix  $node_ClosestPointOnMesh_inputMatrix;
        
        //getAttr
        float $vec_persp_pos[3]=`getAttr $persp_translate`; 
        float $vec_closestPoint_pos[3]=`getAttr $node_ClosestPointOnMesh_outPosition`;
        float $vec_closestPoint_normal[3]=`getAttr $node_ClosestPointOnMesh_result_normal`;
        float $vec_persp_closestPoint[3] = {$vec_persp_pos[0] - $vec_closestPoint_pos[0],
                                            $vec_persp_pos[1] - $vec_closestPoint_pos[1],
                                            $vec_persp_pos[2] - $vec_closestPoint_pos[2]};
        
        float $dotProductResult = dotProduct($vec_persp_closestPoint,$vec_closestPoint_normal,0);
        print $dotProductResult;
        select $sel[0];
        if($dotProductResult<0){
            polyNormal -normalMode 0 -userNormalMode 1 -ch 1;
        }
        delete $node_ClosestPointOnMesh;
        select $sel[0];
    }

}