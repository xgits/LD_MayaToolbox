
global proc copy2Vertex()
{ 
    string $selection[] = `ls -os -fl`;
    string $selectionObj[] = `ls -sl -o -fl`;
    string $pointNames[] = `filterExpand -selectionMask 31 -expand true $selection`;
    string $objectToInstance = $selection[0];
    int $sizeOfSel = size($selectionObj)-1;

    int $count = 0;
    for ($count =0; $count<$sizeOfSel; $count=$count+1 )
    {
        select -r $selectionObj[$count];
        float $pivotWSPos[] = `xform -ws -q -piv`;
        move -rpr 0 0 0 $selectionObj[$count];
        FreezeTransformations;
        move -rpr $pivotWSPos[0] $pivotWSPos[1] $pivotWSPos[2];
    }


    if( `objectType $objectToInstance` == "transform" ) {
        
        string $point;
        for( $point in $pointNames ) {
            
            int $objToInstancer = `rand $sizeOfSel`;
            string $newInstance[] = `instance $selection[$objToInstancer]`;
            
            vector $position = `pointPosition -w $point`;
            
            // move -a -ws ($position.x) ($position.y) ($position.z) $newInstance;
            
            float $normal3[] = `polyNormalPerVertex -q -xyz $point`;
            vector $normal = << $normal3[0], $normal3[1] ,$normal3[2]>>;
            c2v_moveAlign( $newInstance[0], $normal, $position );
            
        }
        
    } else {
        
        print "Please ensure the first object you select is a transform.";
        
    }
}
    
global proc c2v_moveAlign( string $pObjectName, vector $pNormal, vector $pPosition ) {
        
        vector $tangent1 = unit( cross( $pNormal, << 0, 1, 0 >> ) );
        if( mag( $tangent1 ) == 0 ) {
            $tangent1 = << 1, 0, 0 >>;
        }
        
        vector $tangent2 = unit( cross( $pNormal, $tangent1 ) );
        
        matrix $m[4][4] = <<
            ($tangent2.x), ($tangent2.y), ($tangent2.z), 0.0;
            ($pNormal.x),  ($pNormal.y),  ($pNormal.z),  0.0;
            ($tangent1.x), ($tangent1.y), ($tangent1.z), 0.0;
            ($pPosition.x), ($pPosition.y), ($pPosition.z), 1.0 >>;
        
        xform -ws -m
            ($m[0][0]) ($m[0][1]) ($m[0][2]) ($m[0][3])
            ($m[1][0]) ($m[1][1]) ($m[1][2]) ($m[1][3])
            ($m[2][0]) ($m[2][1]) ($m[2][2]) ($m[2][3]) 
            ($m[3][0]) ($m[3][1]) ($m[3][2]) ($m[3][3]) $pObjectName;
        
    }